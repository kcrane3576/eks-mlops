name: Terraform CI - branches/PRs

on:
  pull_request:

jobs:
  terraform:
    if: >
      github.repository == vars.REPO_CAN_RUN_CI &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: terraform/envs/dev
    env:
      TF_VAR_environment: ${{ vars.TF_VAR_ENVIRONMENT }}
      TF_VAR_repo_name: ${{ vars.TF_VAR_REPO_NAME }}
      TF_VAR_enable_vpc_flow_logs: ${{ secrets.TF_VAR_ENABLE_VPC_FLOW_LOGS }}
      TF_VAR_tags: ${{ secrets.TF_VAR_TAGS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load environment-specific secrets
        run: |
          echo "TF_VAR_region=${{ secrets[format('TF_VAR_{0}_REGION', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_vpc_name=${{ secrets[format('TF_VAR_{0}_VPC_NAME', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_vpc_cidr=${{ secrets[format('TF_VAR_{0}_CIDR_BLOCK', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_azs=${{ secrets[format('TF_VAR_{0}_AZS', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_private_subnets=${{ secrets[format('TF_VAR_{0}_PRIVATE_SUBNETS', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_public_subnets=${{ secrets[format('TF_VAR_{0}_PUBLIC_SUBNETS', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_cluster_name=${{ secrets[format('TF_VAR_{0}_CLUSTER_NAME', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_s3_bucket_name=${{ secrets[format('TF_VAR_{0}_S3_BUCKET_NAME', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_s3_bucket_key=${{ secrets[format('TF_VAR_{0}_S3_BUCKET_KEY', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "TF_VAR_dynamodb_table_name=${{ secrets[format('TF_VAR_{0}_DYNAMODB_TABLE_NAME', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV
          echo "ROLE_TO_ASSUME=${{ secrets[format('TF_VAR_{0}_READ_ROLE_ARN', vars.TF_VAR_ENVIRONMENT)] }}" >> $GITHUB_ENV

      - name: Configure AWS credentials (Read)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.TF_VAR_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          TF_LOG=debug terraform init \
            -backend-config="bucket=$TF_VAR_s3_bucket_name" \
            -backend-config="key=$TF_VAR_s3_bucket_key" \
            -backend-config="region=$TF_VAR_region" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=$TF_VAR_dynamodb_table_name"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (no lock)
        run: terraform plan -lock=false

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov Scan
        shell: bash
        run: |
          (
            set +e  # disable immediate exit on error
            checkov -d . --framework terraform --download-external-modules true --config-file ../../../.checkov.yml -o json > checkov.json
            status=$?
            if [ "$status" -ne 0 ]; then
              echo "‚ùå Checkov failed. Summary:"
              checkov -d . --framework terraform --download-external-modules true --config-file ../../../.checkov.yml -o cli

            fi
            exit $status
          )
